@page "/datatab/{id:int}"
@using BlazorBootstrap
@using RunningBlazor.Services
@using RunningBlazor.Shared.Services
@using RunningBlazor.Shared.Running
@using System.ComponentModel.DataAnnotations
@inject IDataFactory<RunningBlazor.Shared.Running.DataTab> TabFactory
@inject NavigationManager Navigation

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<!-- Add chart.js reference if chart components are used in your application. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js" integrity="sha512-ZwR1/gSZM3ai6vCdI+LVF1zSq/5HznD3ZSTk7kajkaj4D292NLuduDCO1c/NT8Id+jE58KYLKT7hXnbtryGmMg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Add sortable.js reference if SortableList component is used in your application. -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>
<PageTitle>@Name</PageTitle>

<h1>@Name</h1>

@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <LineChart @ref="lineChart">

    </LineChart>
    <EditForm Model="DataValue" OnValidSubmit="Submit" FormName="AddDataTabData">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label>
            Date
            <InputDate @bind-Value="DataValue!.DateTime" />
        </label>

        <label>
            Value:
            <InputNumber @bind-Value="DataValue!.Value" />
        </label>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data)
            {
                <tr>
                    <td>@item.Date.ToShortDateString()</td>
                    <td>@item.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public class DataTabDataForm
    {
        [Required]
        public DateTime? DateTime { get; set; }

        [Required]
        [Range(1, int.MaxValue)]
        public double? Value { get; set; }
    }

    [Parameter]
    public int? Id { get; set; }
    private string Name { get; set; }
    private IDataFactory<DataTabData> dataFactory;
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private DataTabData[]? data = null;
    private double staticLine;
    private bool submitted { get; set; }
    [SupplyParameterFromForm]
    private DataTabDataForm DataValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        submitted = false;
        DataValue ??= new() { DateTime = DateTime.Today };
        if (Id is null)
            throw new Exception("No ID");

        var tab = TabFactory.Get(Id.Value);
        this.Name = tab.Name;

        if (tab == null)
            throw new Exception("Could NOT find DataTab.");

        dataFactory = new DataFactory<DataTabData>(tab.Name);
        staticLine = tab.Goal;
        data = dataFactory.GetAll().ToArray();
        chartData = new ChartData { Labels = GetLabels(), Datasets = GetDatasets() };
        lineChartOptions = new()
            {
                IndexAxis = "x",
                Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
                Responsive = true,
            };
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private List<string> GetLabels()
    {
        List<string> labels = [];
        DateTime highest = DateTime.MinValue;
        DateTime lowest = DateTime.MaxValue;
        foreach (var dat in data)
        {
            if (dat.Date > highest)
                highest = dat.Date;

            if (dat.Date < lowest)
                lowest = dat.Date;
        }

        if (lowest == DateTime.MaxValue && highest == DateTime.MinValue)
            return [];

        lowest = Previous(lowest, DayOfWeek.Sunday);
        highest = Previous(highest, DayOfWeek.Sunday);

        while (lowest.Date <= highest.Date)
        {
            labels.Add(lowest.Date.ToString());
            lowest = lowest.AddDays(7);
        }
        return labels;
    }

    private List<IChartDataset> GetDatasets()
    {
        List<IChartDataset> datasets = [];
        DateTime highest = DateTime.MinValue;
        DateTime lowest = DateTime.MaxValue;
        foreach (var dat in data)
        {
            if (dat.Date > highest)
                highest = dat.Date;

            if (dat.Date < lowest)
                lowest = dat.Date;
        }

        if (lowest == DateTime.MaxValue && highest == DateTime.MinValue)
            return [];

        lowest = Previous(lowest, DayOfWeek.Sunday);
        highest = Previous(highest, DayOfWeek.Sunday);

        List<double?> weeklySum = [];

        int highestWeek = highest.Date.Date.Subtract(lowest).Days / 7;
        for (int i = 0; i <= highestWeek; i++)
        {
            weeklySum.Add(0);
        }

        foreach (var dat in data)
        {
            int week = dat.Date.Date.Subtract(lowest).Days / 7;

            weeklySum[week] += dat.Value;
        }

        var dataColor = ColorUtility.CategoricalTwelveColors[1].ToColor();
        datasets.Add(new LineChartDataset()
            {
                Label = "Data",
                BackgroundColor = dataColor.ToRgbaString(),
                BorderColor = dataColor.ToRgbString(),
                Data = weeklySum,
            });

        List<double?> constant = [];
        foreach (var item in weeklySum)
        {
            constant.Add(staticLine);
        }
        var staticColor = ColorUtility.CategoricalTwelveColors[0].ToColor();
        datasets.Add(new LineChartDataset()
            {
                Label = "Goal",
                BackgroundColor = staticColor.ToRgbaString(),
                BorderColor = staticColor.ToRgbString(),
                Data = constant
            });

        return datasets;
    }

    public static DateTime Previous(DateTime from, DayOfWeek dayOfWeek)
    {
        int start = (int)from.DayOfWeek;
        int target = (int)dayOfWeek;
        if (target > start)
            target -= 7;
        return from.AddDays(target - start);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (lineChart is not null)
        {
            await OnInitializedAsync();
            await lineChart.UpdateAsync(chartData, lineChartOptions);
        }
    }

    private void Submit()
    {
        if (!submitted)
        {
            submitted = true;
            dataFactory.Upsert(ConvertInput(DataValue!));
            Navigation.Refresh();
        }
    }

    private static DataTabData ConvertInput(DataTabDataForm input)
    {
        return new DataTabData()
            {
                Date = input.DateTime!.Value,
                Value = input.Value!.Value
            };
    }
}
